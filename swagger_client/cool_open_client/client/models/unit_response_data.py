# coding: utf-8

"""
    OpenClientCoolAutomationAPI

    Cool platform REST API

    The version of the OpenAPI document: 2.0.1
    Contact: none@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cool_open_client.client.models.unit_response_data_temperature_limits import UnitResponseDataTemperatureLimits
from typing import Optional, Set
from typing_extensions import Self

class UnitResponseData(BaseModel):
    """
    UnitResponseData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="unit ID")
    name: Optional[StrictStr] = Field(default=None, description="system name")
    device: Optional[StrictStr] = Field(default=None, description="parent device id")
    is_connected: Optional[StrictBool] = Field(default=None, description="Is unit connected", alias="isConnected")
    supported_operation_statuses: Optional[List[StrictInt]] = Field(default=None, description="Supported operation statuses", alias="supportedOperationStatuses")
    supported_operation_modes: Optional[List[StrictInt]] = Field(default=None, description="Supported operation modes", alias="supportedOperationModes")
    supported_fan_modes: Optional[List[StrictInt]] = Field(default=None, description="Supported fan modes", alias="supportedFanModes")
    supported_swing_modes: Optional[List[StrictInt]] = Field(default=None, description="Supported swing modes", alias="supportedSwingModes")
    temperature_limits: Optional[UnitResponseDataTemperatureLimits] = Field(default=None, alias="temperatureLimits")
    brand: Optional[StrictInt] = None
    active_setpoint: Optional[StrictInt] = Field(default=None, alias="activeSetpoint")
    ambient_temperature: Optional[StrictInt] = Field(default=None, alias="ambientTemperature")
    active_operation_status: Optional[StrictInt] = Field(default=None, alias="activeOperationStatus")
    active_operation_mode: Optional[StrictInt] = Field(default=None, alias="activeOperationMode")
    active_fan_mode: Optional[StrictInt] = Field(default=None, alias="activeFanMode")
    active_swing_mode: Optional[StrictInt] = Field(default=None, alias="activeSwingMode")
    filter: Optional[StrictBool] = None
    enable_cool_mode: Optional[StrictBool] = Field(default=None, alias="enableCoolMode")
    enable_heat_mode: Optional[StrictBool] = Field(default=None, alias="enableHeatMode")
    enable_auto_mode: Optional[StrictBool] = Field(default=None, alias="enableAutoMode")
    is_half_c_degree_enabled: Optional[StrictBool] = Field(default=None, alias="isHalfCDegreeEnabled")
    __properties: ClassVar[List[str]] = ["id", "name", "device", "isConnected", "supportedOperationStatuses", "supportedOperationModes", "supportedFanModes", "supportedSwingModes", "temperatureLimits", "brand", "activeSetpoint", "ambientTemperature", "activeOperationStatus", "activeOperationMode", "activeFanMode", "activeSwingMode", "filter", "enableCoolMode", "enableHeatMode", "enableAutoMode", "isHalfCDegreeEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnitResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of temperature_limits
        if self.temperature_limits:
            _dict['temperatureLimits'] = self.temperature_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnitResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "device": obj.get("device"),
            "isConnected": obj.get("isConnected"),
            "supportedOperationStatuses": obj.get("supportedOperationStatuses"),
            "supportedOperationModes": obj.get("supportedOperationModes"),
            "supportedFanModes": obj.get("supportedFanModes"),
            "supportedSwingModes": obj.get("supportedSwingModes"),
            "temperatureLimits": UnitResponseDataTemperatureLimits.from_dict(obj["temperatureLimits"]) if obj.get("temperatureLimits") is not None else None,
            "brand": obj.get("brand"),
            "activeSetpoint": obj.get("activeSetpoint"),
            "ambientTemperature": obj.get("ambientTemperature"),
            "activeOperationStatus": obj.get("activeOperationStatus"),
            "activeOperationMode": obj.get("activeOperationMode"),
            "activeFanMode": obj.get("activeFanMode"),
            "activeSwingMode": obj.get("activeSwingMode"),
            "filter": obj.get("filter"),
            "enableCoolMode": obj.get("enableCoolMode"),
            "enableHeatMode": obj.get("enableHeatMode"),
            "enableAutoMode": obj.get("enableAutoMode"),
            "isHalfCDegreeEnabled": obj.get("isHalfCDegreeEnabled")
        })
        return _obj



# coding: utf-8

"""
    OpenClientCoolAutomationAPI

    Cool platform REST API

    The version of the OpenAPI document: 2.0.1
    Contact: none@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from cool_open_client.client.models.types_response_data_device_types import TypesResponseDataDeviceTypes
from cool_open_client.client.models.types_response_data_fan_modes import TypesResponseDataFanModes
from cool_open_client.client.models.types_response_data_hvac_brands_inner import TypesResponseDataHvacBrandsInner
from cool_open_client.client.models.types_response_data_operation_modes import TypesResponseDataOperationModes
from cool_open_client.client.models.types_response_data_operation_statuses import TypesResponseDataOperationStatuses
from cool_open_client.client.models.types_response_data_permissions import TypesResponseDataPermissions
from cool_open_client.client.models.types_response_data_resources import TypesResponseDataResources
from cool_open_client.client.models.types_response_data_roles import TypesResponseDataRoles
from cool_open_client.client.models.types_response_data_swing_modes import TypesResponseDataSwingModes
from cool_open_client.client.models.types_response_data_temperature_scale import TypesResponseDataTemperatureScale
from cool_open_client.client.models.types_response_data_unit_types import TypesResponseDataUnitTypes
from cool_open_client.client.models.types_response_data_week_days import TypesResponseDataWeekDays
from typing import Optional, Set
from typing_extensions import Self

class TypesResponseData(BaseModel):
    """
    TypesResponseData
    """ # noqa: E501
    temperature_scale: Optional[TypesResponseDataTemperatureScale] = Field(default=None, alias="temperatureScale")
    operation_statuses: Optional[TypesResponseDataOperationStatuses] = Field(default=None, alias="operationStatuses")
    operation_modes: Optional[TypesResponseDataOperationModes] = Field(default=None, alias="operationModes")
    fan_modes: Optional[TypesResponseDataFanModes] = Field(default=None, alias="fanModes")
    swing_modes: Optional[TypesResponseDataSwingModes] = Field(default=None, alias="swingModes")
    week_days: Optional[TypesResponseDataWeekDays] = Field(default=None, alias="weekDays")
    permissions: Optional[TypesResponseDataPermissions] = None
    resources: Optional[TypesResponseDataResources] = None
    roles: Optional[TypesResponseDataRoles] = None
    unit_types: Optional[TypesResponseDataUnitTypes] = Field(default=None, alias="unitTypes")
    hvac_brands: Optional[List[TypesResponseDataHvacBrandsInner]] = Field(default=None, description="array of hvac brands", alias="hvacBrands")
    device_types: Optional[TypesResponseDataDeviceTypes] = Field(default=None, alias="deviceTypes")
    __properties: ClassVar[List[str]] = ["temperatureScale", "operationStatuses", "operationModes", "fanModes", "swingModes", "weekDays", "permissions", "resources", "roles", "unitTypes", "hvacBrands", "deviceTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TypesResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of temperature_scale
        if self.temperature_scale:
            _dict['temperatureScale'] = self.temperature_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_statuses
        if self.operation_statuses:
            _dict['operationStatuses'] = self.operation_statuses.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_modes
        if self.operation_modes:
            _dict['operationModes'] = self.operation_modes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fan_modes
        if self.fan_modes:
            _dict['fanModes'] = self.fan_modes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of swing_modes
        if self.swing_modes:
            _dict['swingModes'] = self.swing_modes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of week_days
        if self.week_days:
            _dict['weekDays'] = self.week_days.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict['roles'] = self.roles.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_types
        if self.unit_types:
            _dict['unitTypes'] = self.unit_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hvac_brands (list)
        _items = []
        if self.hvac_brands:
            for _item_hvac_brands in self.hvac_brands:
                if _item_hvac_brands:
                    _items.append(_item_hvac_brands.to_dict())
            _dict['hvacBrands'] = _items
        # override the default output from pydantic by calling `to_dict()` of device_types
        if self.device_types:
            _dict['deviceTypes'] = self.device_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TypesResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "temperatureScale": TypesResponseDataTemperatureScale.from_dict(obj["temperatureScale"]) if obj.get("temperatureScale") is not None else None,
            "operationStatuses": TypesResponseDataOperationStatuses.from_dict(obj["operationStatuses"]) if obj.get("operationStatuses") is not None else None,
            "operationModes": TypesResponseDataOperationModes.from_dict(obj["operationModes"]) if obj.get("operationModes") is not None else None,
            "fanModes": TypesResponseDataFanModes.from_dict(obj["fanModes"]) if obj.get("fanModes") is not None else None,
            "swingModes": TypesResponseDataSwingModes.from_dict(obj["swingModes"]) if obj.get("swingModes") is not None else None,
            "weekDays": TypesResponseDataWeekDays.from_dict(obj["weekDays"]) if obj.get("weekDays") is not None else None,
            "permissions": TypesResponseDataPermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "resources": TypesResponseDataResources.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "roles": TypesResponseDataRoles.from_dict(obj["roles"]) if obj.get("roles") is not None else None,
            "unitTypes": TypesResponseDataUnitTypes.from_dict(obj["unitTypes"]) if obj.get("unitTypes") is not None else None,
            "hvacBrands": [TypesResponseDataHvacBrandsInner.from_dict(_item) for _item in obj["hvacBrands"]] if obj.get("hvacBrands") is not None else None,
            "deviceTypes": TypesResponseDataDeviceTypes.from_dict(obj["deviceTypes"]) if obj.get("deviceTypes") is not None else None
        })
        return _obj


